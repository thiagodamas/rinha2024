// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SaldoExtrato saldo extrato
//
// swagger:model SaldoExtrato
type SaldoExtrato struct {

	// data extrato
	// Required: true
	// Format: date-time
	DataExtrato *strfmt.DateTime `json:"data_extrato"`

	// limite
	// Required: true
	Limite *int64 `json:"limite"`

	// total
	// Required: true
	Total *int64 `json:"total"`
}

// Validate validates this saldo extrato
func (m *SaldoExtrato) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataExtrato(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SaldoExtrato) validateDataExtrato(formats strfmt.Registry) error {

	if err := validate.Required("data_extrato", "body", m.DataExtrato); err != nil {
		return err
	}

	if err := validate.FormatOf("data_extrato", "body", "date-time", m.DataExtrato.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SaldoExtrato) validateLimite(formats strfmt.Registry) error {

	if err := validate.Required("limite", "body", m.Limite); err != nil {
		return err
	}

	return nil
}

func (m *SaldoExtrato) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this saldo extrato based on context it is used
func (m *SaldoExtrato) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SaldoExtrato) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SaldoExtrato) UnmarshalBinary(b []byte) error {
	var res SaldoExtrato
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
